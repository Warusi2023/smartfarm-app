name: SmartFarm Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend-api/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend-api/**'

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'sqlite:test.db'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend-api
      run: npm ci
      
    - name: Run linting
      working-directory: ./backend-api
      run: npm run lint || echo "Linting not configured"
      
    - name: Run unit tests
      working-directory: ./backend-api
      run: npm run test:unit
      
    - name: Run integration tests
      working-directory: ./backend-api
      run: npm run test:integration
      
    - name: Generate coverage report
      working-directory: ./backend-api
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-api/coverage/lcov.info
        flags: backend
        name: smartfarm-backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: backend-api/coverage/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend-api
      run: npm ci
      
    - name: Run security audit
      working-directory: ./backend-api
      run: npm audit --audit-level=high
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend-api
      run: npm ci --production
      
    - name: Build application
      working-directory: ./backend-api
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: backend-api/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        
    - name: Deploy to Railway Staging
      uses: railway-app/railway-deploy@v2
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: smartfarm-backend-staging
        detach: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        
    - name: Deploy to Railway Production
      uses: railway-app/railway-deploy@v2
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: smartfarm-backend
        detach: true
        
    - name: Run database migrations
      run: |
        curl -X POST "${{ secrets.RAILWAY_PRODUCTION_URL }}/api/migrate" \
          -H "Authorization: Bearer ${{ secrets.RAILWAY_MIGRATION_TOKEN }}"
      continue-on-error: true
      
    - name: Health check
      run: |
        sleep 30
        curl -f "${{ secrets.RAILWAY_PRODUCTION_URL }}/api/health" || exit 1

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#smartfarm-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
      continue-on-error: true
