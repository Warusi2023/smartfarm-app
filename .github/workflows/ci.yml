name: SmartFarm CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC (3 PM NZDT, 2 PM NZST)
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Tests and Quality Checks
  frontend-quality:
    name: Frontend Quality & Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web-project
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-project/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./web-project/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: web-project/test-results/

      - name: Upload E2E report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report
          path: web-project/playwright-report/

  # Backend Tests and Quality Checks
  backend-quality:
    name: Backend Quality & Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend-api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend-api/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend-api/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Run integration tests
        run: npm run test:integration

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit frontend dependencies
        working-directory: ./web-project
        run: |
          npm ci
          npm audit --audit-level=moderate

      - name: Audit backend dependencies
        working-directory: ./backend-api
        run: |
          npm ci
          npm audit --audit-level=moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Lighthouse CI
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web-project
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-project/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: npm run lhci

      - name: Upload Lighthouse CI results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: web-project/.lighthouseci/

  # Build and Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, security-audit, lighthouse-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend Build and Deploy to Netlify
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-project/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./web-project
        run: npm ci

      - name: Build frontend
        working-directory: ./web-project
        run: npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './web-project/public'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Backend Deploy to Railway
      - name: Setup Node.js for backend
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend-api/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend-api
        run: npm ci

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.7
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}
          working_directory: ./backend-api

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Frontend: https://smartfarm-app.netlify.app"
          echo "Backend: https://smartfarm-api.railway.app"

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details."