name: Deploy SmartFarm

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_VERSION: '18.19.0'
  BACKEND_DIR: 'backend'
  FRONTEND_DIR: 'web-project'

jobs:
  # Backend deployment job
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json
          
      - name: Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci --production=false
        
      - name: Run backend linting
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run lint:check
        
      - name: Run backend typecheck
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run typecheck || true
        
      - name: Run backend tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm test
        
      - name: Build backend
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build
        
      - name: Deploy to Railway
        uses: railwayapp/action@v1
        with:
          serviceId: ${{ secrets.RAILWAY_SERVICE_ID }}
          railwayToken: ${{ secrets.RAILWAY_TOKEN }}
        env:
          NODE_ENV: production
          
  # Frontend deployment job
  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci --production=false
        
      - name: Run frontend linting
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint:check
        
      - name: Run frontend typecheck
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run typecheck || true
        
      - name: Run frontend typecheck for tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run typecheck:test || true
        
      - name: Run frontend tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm test
        
      - name: Validate SVG viewBox attributes
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run validate:svg
        
      - name: Validate DOM IDs
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run validate:ids
        
      - name: Validate CORS configuration
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run validate:cors
        
      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
        
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: ${{ env.FRONTEND_DIR }}/dist
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          
  # Testing job (runs on PRs)
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        project: [backend, frontend]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project == 'backend' && env.BACKEND_DIR || env.FRONTEND_DIR }}/package-lock.json
          
      - name: Install dependencies
        working-directory: ${{ matrix.project == 'backend' && env.BACKEND_DIR || env.FRONTEND_DIR }}
        run: npm ci --production=false
        
      - name: Run linting
        working-directory: ${{ matrix.project == 'backend' && env.BACKEND_DIR || env.FRONTEND_DIR }}
        run: npm run lint:check
        
      - name: Run tests
        working-directory: ${{ matrix.project == 'backend' && env.BACKEND_DIR || env.FRONTEND_DIR }}
        run: npm test
        
      - name: Run frontend validations
        if: matrix.project == 'frontend'
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm run validate:svg
          npm run validate:ids
          npm run validate:cors
          
      - name: Build project
        working-directory: ${{ matrix.project == 'backend' && env.BACKEND_DIR || env.FRONTEND_DIR }}
        run: npm run build
        
  # Security and quality checks
  security:
    name: Security and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified